module.exports = {
    extends: ['airbnb'],
    env: {
        browser: true,
        node: true,
    },
    parser: 'babel-eslint',
    plugins: ['babel', 'react-hooks'],
    rules: {
        'arrow-parens': ['error', 'always'],
        'import/no-unresolved': 'off',
        indent: ['error', 4, { SwitchCase: 1 }],
        'jsx-a11y/label-has-for': 'off',
        'jsx-a11y/label-has-associated-control': [
            2,
            {
                controlComponents: ['Select', 'Input'],
                assert: 'either',
                depth: 3,
            },
        ],
        'max-len': ['error', 250, 2],
        'no-continue': 'off',
        'no-param-reassign': 'off',
        'no-restricted-syntax': 'off',
        'no-underscore-dangle': ['error', { allow: ['__BROWSER__'] }],
        'object-curly-newline': 'off',
        'import/prefer-default-export': 'off',
        'react/forbid-prop-types': 'off',
        'react/jsx-indent': ['error', 4],
        'react/jsx-indent-props': ['error', 4],
        'react/jsx-filename-extension': 'off',
        'react/jsx-one-expression-per-line': 'off',
        'react/prefer-stateless-function': 'off',
        'react/no-array-index-key': 'warn',
        'react/sort-comp': [
            'error',
            {
                groups: {
                    lifecycle: [
                        'displayName',
                        'propTypes',
                        'contextTypes',
                        'childContextTypes',
                        'mixins',
                        'statics',
                        'defaultProps',
                        'state',
                        'instance-variables',
                        'constructor',
                        'getDefaultProps',
                        'getInitialState',
                        'getChildContext',
                        'componentWillMount',
                        'componentDidMount',
                        'componentWillReceiveProps',
                        'shouldComponentUpdate',
                        'componentWillUpdate',
                        'componentDidUpdate',
                        'componentWillUnmount',
                    ],
                },
            },
        ],
        'react-hooks/rules-of-hooks': 'error',
        'react-hooks/exhaustive-deps': 'warn',
        semi: 'off',
    },
    globals: {
        document: false,
    },
};
